{"version":3,"sources":["js/helpers/math.js","js/components/post-list/post/Post.js","js/components/post-list/PostList.js","js/components/infinite-scroll/InfiniteScroll.js","js/index.js"],"names":["random","lower","upper","integer","undefined","Math","floor","Post","id","fetchImageAttempts","fetchImageMaxAttemps","container","document","createElement","className","header","appendChild","main","footer","createPostImage","prototype","response","fetchPostImage","console","log","blobURL","window","URL","createObjectURL","img","Image","src","result","Promise","resolve","reject","request","XMLHttpRequest","responseType","open","send","onload","status","statusText","error","onerror","Error","PostList","element","createManyPosts","amount","i","createSinglePost","post","InfiniteScroll","content","callback","busy","addEventListener","onScroll","bind","scrollTop","offsetHeight","clientHeight","shouldTrigger","setTimeout","onComplete","init","headerEl","querySelector","mainEl","postsEl","footerEl","postList","infiniteScroll","done","removeEventListener"],"mappings":";;AIAA;;AACA;;;ADDA,ADAA,ADAA,ADAA,SGASsD,cAAT,CAAwB3C,SAAxB,EAAmC4C,OAAnC,EAA4CC,QAA5C,EAAsD;AACpD,ACEF,ODFO7C,ECEEwD,IAAT,GDFE,ACEc,GDFGxD,SAAjB;AACA,ADDF,ADCA,AGEE,ODFK4C,CCECa,CHFC7D,IAAT,CEAE,AFAYC,EAAd,AGEgB,CDFC+C,CFAC,CGEC3C,KDFjB,GCEyB,CAACyD,aAAT,CAAuB,SAAvB,CAAjB;ADDA,AFAA,AGEA,ODFKb,AFAAhD,CGEC8D,CHFN,GAAU9D,EAAV,AGEY,CDFZ,ECEeI,CDFC4C,OCEO,CDFvB,ACEwBa,aAAT,CAAuB,OAAvB,CAAf;ADDA,AFAA,AGEA,ODFKZ,AFAAhD,CGEC8D,GDFN,GAAY,CCEC,GAAG3D,CDFhB,MFAA,CGEwB,CAACyD,CHFC,CAA1B,WGEgB,CAAuB,QAAvB,CAAhB;ADAA,AFDA,AGEA,ODDK1D,AFDAD,CGEC8D,QDDN,ACCc,CDDCd,ECCE9C,QHFjB,AGEyB,CAACyD,EHFE,CAA5B,EECA,CAAgC,OCCf,CDDjB,ACCwC,EDDE,KAAKV,ECC9B,CAAjB,KDD0C,CAAcC,IAAd,CAAmB,IAAnB,CAA1C;AACD,ADJD,ADIE,AGEA,OHFKjD,CGEC8D,CFNC1B,ODIP,AGEc,CFNhB,CAAkBC,CDICpC,AGEA,IAAImC,EFNvB,EAA2B,ADIA,CAAClC,YGET,CHFA,AGEa0D,CHFU,KAAvB,CAAjB,AGEiB,CAAjB;AFLA,ADIA,AGEA,OFNKvB,ADIArC,CGEC+D,MFNN,EDIA,CCJe1B,ADIAlC,KGEK,EFNpB,CEMuB,CHFvB,GAA2B,AGEAwC,MHF3B,iBGEuB,CAAmBgB,MAAnB,EAA2BC,OAA3B,EAAoCI,IAAI,IAAI;ADHpE,ADFC,ADKA,AGCEF,IAAAA,GFNGxB,ADKAlC,KGCK,CHDV,AGCWkC,GHDGrC,MCLd,CAAqB,CAArB,ADKsB,CAACC,GGCrB,CAAyB,CAAzB,QHDY,CAAuB,KAAvB,CAAd;ACJD,ADKC,AGCE8D,IAAAA,GHDG5D,CGCC,KHDN,CAAYD,SAAZ,GAAwB,cAAxB;AEFFwC,AFGE,AGCC,GAHsB,CAAvB,GHEK3C,OEHO,CAACS,CFGb,CAAeJ,OEHjB,CAAyB2C,GFGvB,CAA2B,IEH7B,CFGkC5C,EEHE,IFGlC,QEH6C;AAC7C,ADJD,ADQC,ADHK,AIILW,EAAAA,IJJW1B,CCGNiB,CEJC4C,ACKA,CAACe,EHDP,CDHiB,ECGLhE,CDHQ,CAACX,CGDN,GAAG,CHCE,CCGA,CAACY,ADHOX,EGDLS,GHCH,AIIpB,CAA2B,CJJQR,IGDjB,CAAe0D,CFIrB,CAAuB,ADHf,KCGR,ADHmC,CCG/C,CEJA,GCKA,EAA+CM,IAA/C;ADJA,AFIA,ADHAlE,AIID,EJJCA,KCGKgB,ADHA,CGDC6C,EHCE7D,CCGR,CAAUa,GDHG,KGDK,AHCAV,CCGlB,EEJqB,CFIC,IEJIO,CHClB,GAAsB,CAAtB,GCGR,ADHkCV,CGDb,CAAe6D,GHCpC,SGDA;AACA,ADJFf,ADQE,ADHA7C,EAAAA,KCGKS,ADHA,CGDCoD,ADJA,CAAC3C,CFKClB,KAAK,CCGb,CAAec,CCRjB,CAAmBiC,CCIC,AHCA7C,GGDG,KAAKmD,AFI1B,CAA2B,ADHnB,GAAsB,CAAtB,CELV,ADQkCtC,CEJX,CAAa8C,AHCA7D,CELC,CDQnC,GDHA,MEL4CgD,CCI5C,KDJmC,EAAiB;ACKpD,ADJA,ADSA,ADHA,AICD,MJDKlD,CENC,ADSAkB,CELC8C,GDJGb,CAAC,AFMA,CCGV,ECTa,AFMAhD,CENb,ADScS,ECTEuC,CAAC,ECIE,CDJCD,AFMA,EGFEW,AFKA,CAAChD,ADFnBZ,GEPJ,EAA4BkD,AFOnB,CEPoB,ECIE,ADJ/B,AFOY9C,EEPqB,CCICyD,CHGlB,CCEF,ADFGxD,CCEoB,IDFzB,CCEE,ADFSD,CCEvB,GELsB,AHGK,CAACL,GGHsB+D,GHG3B,MAAiB7D,GGHxC,EHG6C,GAAGD,KAAR,GAAgB,CAAjC,CAAX,CADQ,GAEhBA,KAAK,GAAGI,IAAI,CAACL,MAAL,MAAiBE,KAAK,GAAGD,KAAzB,CAFZ;AELE,ADSF,ADAA,AIDFyB,MAAM,CHCCR,AGDAwC,EFREN,AFSApD,ICAP,CAAYc,CDAZ,QCAA,AGDF,CAAwB,CFRpB,CDSsB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","file":"js.00a46daa.js","sourceRoot":"../src","sourcesContent":["/**\n * Produces a random number between the `lower` and `upper` bounds.\n * If no argument is provided a floating-point number between `0` and `1`\n * is returned. If `integer` is `true`, an integer is returned instead\n * of a floating-point number.\n *\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @param {boolean} integer Specify returning an integer.\n * @returns {number} Returns the random number.\n */\nexport const random = (lower, upper, integer) => {\n  lower = lower === undefined ? 0 : lower;\n  upper = upper === undefined ? 1 : upper;\n\n  let random = integer\n    ? lower + Math.floor(Math.random() * (upper - lower + 1))\n    : lower + Math.random() * (upper - lower);\n\n  return random;\n};","import { random } from '../../../helpers/math';\n\nfunction Post(id) {\n  this.id = id;\n  this.fetchImageAttempts = 0;\n  this.fetchImageMaxAttemps = 3;\n\n  this.container = document.createElement('div');\n  this.container.className = 'post';\n\n  this.header = document.createElement('div');\n  this.header.className = 'post__header';\n  this.container.appendChild(this.header);\n\n  this.main = document.createElement('div');\n  this.main.className = 'post__main';\n  this.container.appendChild(this.main);\n\n  this.footer = document.createElement('div');\n  this.footer.className = 'post__footer';\n  this.container.appendChild(this.footer);\n\n  this.createPostImage();\n\n  return this.container;\n};\n\nPost.prototype.createPostImage = async function() {\n  const response = await this.fetchPostImage();\n  console.log(response);\n\n  const blobURL = window.URL.createObjectURL(response);\n  const img = new Image();\n  img.src = blobURL;\n  this.main.appendChild(img);\n}\n\nPost.prototype.fetchPostImage = function () {\n  const id = this.id;\n\n  const result = new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.responseType = 'blob';\n    request.open('GET', `https://picsum.photos/id/${id}/400/430`);\n    request.send();\n\n    request.onload = () => {\n      const { status, response, statusText } = request;\n\n      if (status === 200) {\n        resolve(response);\n        console.log('Image success');\n      } else if (status === 404) {\n        console.log('----------------');\n        console.log(this.id);\n        this.id = random(0, 1000, true);\n        this.createPostImage();\n        console.log(`404 trying another image: ${this.id}`);\n      } else {\n        if (this.fetchImageAttempts < this.fetchImageMaxAttemps) {\n          this.fetchPostImage();\n          this.fetchImageAttempts += 1;\n          console.log('Retrying to fetch image');\n        } else {\n          console.error(`There was a problem with the request: ${statusText}`);\n        }\n      }\n    }\n\n    request.onerror = () => {\n      reject(new Error('There was a network error'));\n    }\n  });\n\n  return result;\n};\n\nexport default Post;\n\n// const fetchNewPosts = async (amount) => {\n  //   const promises = [];\n  \n  //   for (var i = 0; i < amount; i++) {\n  //     const promise = new Promise((resolve, reject) => {\n  //       const id = randomRange(0, 1000);\n  //       const request = new XMLHttpRequest();\n  //       request.responseType = 'blob';\n  //       request.open('GET', `https://picsum.photos/id/${id}/300/400`);\n  //       request.send();\n  \n  //       request.onload = () => {\n  //         if (request.status === 200) {\n  //           resolve(request.response);\n  //         } else {\n  //           console.log(`There was a problem with the request: ${request.statusText}`);\n  //         }\n  //       };\n  \n  //       request.onerror = () => {\n  //         reject(new Error('There was a network error.'));\n  //       };\n  //     });\n  \n  //     promises.push(promise);\n  //   }\n  \n  //   const results = await Promise.all(promises);\n  //   return results;\n  // }","import Post from './post/Post';\nimport { random } from '../../helpers/math';\n\nfunction PostList(element) {\n  this.element = element;\n  this.createManyPosts(3);\n};\n\nPostList.prototype.createManyPosts = function(amount) {\n  for (var i = 0; i < amount; i++) {\n    this.createSinglePost();\n  }\n};\n\nPostList.prototype.createSinglePost = function() {\n  const id = random(0, 1000, true);\n  const post = new Post(id);\n  this.element.appendChild(post);\n};\n\nexport default PostList;","function InfiniteScroll(container, content, callback) {\n  this.container = container;\n  this.content = content;\n  this.callback = callback;\n  this.busy = false;\n\n  this.container.addEventListener('scroll', this.onScroll.bind(this));\n};\n\nInfiniteScroll.prototype.onScroll = function() {\n  const scrollTop = this.container.scrollTop;\n  const offsetHeight = this.container.offsetHeight;\n  const clientHeight = this.content.clientHeight;\n  const shouldTrigger = scrollTop + offsetHeight >= clientHeight;\n\n  if (this.busy) {\n    return;\n  }\n\n  if (shouldTrigger) {\n    this.busy = true;\n\n    setTimeout(() => {\n      this.callback(this.onComplete.bind(this));\n    }, 1500);\n  }\n};\n\nInfiniteScroll.prototype.onComplete = function() {\n  this.busy = false;\n  this.onScroll();\n};\n\nexport default InfiniteScroll;","import PostList from './components/post-list/PostList';\nimport InfiniteScroll from './components/infinite-scroll/InfiniteScroll';\n\nfunction init() {\n  const headerEl = document.querySelector('#header');\n  const mainEl = document.querySelector('#main');\n  const postsEl = document.querySelector('#posts');\n  const footerEl = document.querySelector('#footer');\n\n  const postList = new PostList(postsEl);\n  const infiniteScroll = new InfiniteScroll(mainEl, postsEl, done => {\n    postList.createManyPosts(3);\n    done();\n  });\n\n  window.removeEventListener('DOMContentLoaded', init);\n};\n\nwindow.addEventListener('DOMContentLoaded', init);"]}